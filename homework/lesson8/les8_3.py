# 3. Создайте собственный класс-исключение, который должен проверять
# содержимое списка на наличие только чисел. Проверить работу исключения
# на реальном примере. Необходимо запрашивать у пользователя данные и
# заполнять список. Класс-исключение должен контролировать типы данных
# элементов списка.

# Примечание: длина списка не фиксирована. Элементы запрашиваются
# бесконечно, пока пользователь сам не остановит работу скрипта, введя,
# например, команду “stop”. При этом скрипт завершается, сформированный
# список выводится на экран.

# Подсказка: для данного задания примем, что пользователь может вводить
# только числа и строки. При вводе пользователем очередного элемента
# необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю
# ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class NumberError(Exception):
    def __init__(self, text):
        self.txt = text


result = []

while True:
    try:
        num = input('Введите число для добавления его в список (для завершения'
                    'программы введите "stop"):\n>>>')
        tmp = num
        if tmp == 'stop':
            break
        if num.rfind('.') == num.find('.') and num.replace('.', '').isdigit():
            result.append(float(tmp))
        else:
            raise NumberError('Ошибка: вы ввели не число')
    except NumberError as err:
        print(err)

print(result)
